@using System.Net.Http.Json;

@using KanbanApp.Models
@inject KanbanApp.Services.TaskService TaskService
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="card mb-3">
        <div class="card-body">
            <div class="mb-2">
                <label class="form-label">Title</label>
                <InputText class="form-control" @bind-Value="model.Title" />
            </div>
            <div class="mb-2">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" @bind-Value="model.Description" Rows="3" />
            </div>
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-success me-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public KanbanTask? TaskToEdit { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancelled { get; set; }

    private KanbanTask model = new();

    protected override void OnParametersSet()
    {
        if (TaskToEdit != null)
        {
            model = new KanbanTask
            {
                Id = TaskToEdit.Id,
                Title = TaskToEdit.Title,
                Description = TaskToEdit.Description,
                Column = TaskToEdit.Column,
                CreatedAt = TaskToEdit.CreatedAt
            };
        }
        else
        {
            model = new KanbanTask();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (TaskToEdit == null)
            await TaskService.AddTask(model);
        else
            await TaskService.UpdateTask(model);

        await OnSaved.InvokeAsync();
    }

    private async Task Cancel()
    {
        await OnCancelled.InvokeAsync();
    }
}
