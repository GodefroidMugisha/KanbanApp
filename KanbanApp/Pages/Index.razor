@using System.Net.Http.Json;

@page "/"
@using KanbanApp.Models
@inject KanbanApp.Services.TaskService TaskService
@inject TaskService TaskService


<h1 class="mb-3">Kanban Board</h1>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <button class="btn btn-primary" @onclick="ToggleForm">
            @if (!showForm) { <span>+ Add Task</span> } else { <span>Close</span> }
        </button>
    </div>
    <div class="text-muted">Tasks: @totalTasks</div>
</div>

@if (showForm)
{
    <TaskForm TaskToEdit="editTask" OnSaved="OnSaved" OnCancelled="OnCancelled" />
}

<div class="row">
    <div class="col-md-4">
        <Column ColumnTypeValue="ColumnType.ToDo"
                Tasks="TaskService.GetTasksByColumn(ColumnType.ToDo)"
                OnEdit="EditTask"
                OnDelete="DeleteTask" />
    </div>
    <div class="col-md-4">
        <Column ColumnTypeValue="ColumnType.InProgress"
                Tasks="TaskService.GetTasksByColumn(ColumnType.InProgress)"
                OnEdit="EditTask"
                OnDelete="DeleteTask" />
    </div>
    <div class="col-md-4">
        <Column ColumnTypeValue="ColumnType.Done"
                Tasks="TaskService.GetTasksByColumn(ColumnType.Done)"
                OnEdit="EditTask"
                OnDelete="DeleteTask" />
    </div>
</div>

@code {
    private bool showForm = false;
    private KanbanTask? editTask;

    private int totalTasks => TaskService.GetTasksByColumn(ColumnType.ToDo).Count()
                            + TaskService.GetTasksByColumn(ColumnType.InProgress).Count()
                            + TaskService.GetTasksByColumn(ColumnType.Done).Count();

    protected override async Task OnInitializedAsync()
    {
        TaskService.OnChange += StateHasChanged;
        await TaskService.InitializeAsync();
    }

    private void ToggleForm()
    {
        showForm = !showForm;
        if (!showForm) editTask = null;
    }

    private void EditTask(KanbanTask t)
    {
        editTask = t;
        showForm = true;
    }

    private async Task DeleteTask(Guid id)
    {
        await TaskService.DeleteTask(id);
    }

    // Updated synchronous methods to remove CS1998 warnings
    private void OnSaved()
    {
        showForm = false;
        editTask = null;
        // TaskService already updated and notified; StateHasChanged will be called by the service event
    }

    private void OnCancelled()
    {
        showForm = false;
        editTask = null;
    }
}
